$NetBSD$

--- third_party/XNNPACK/CMakeLists.txt.orig	2022-07-22 04:48:22.624610681 +0000
+++ third_party/XNNPACK/CMakeLists.txt
@@ -78,13 +78,13 @@ IF(NOT CMAKE_SYSTEM_PROCESSOR)
       MESSAGE(FATAL_ERROR "Unsupported XNNPACK build with multiple iOS architectures (${IOS_ARCH}). "
         "Specify a single architecture in IOS_ARCH and re-configure. ")
     ENDIF()
-    IF(NOT IOS_ARCH MATCHES "^(i386|x86_64|AMD64|armv7.*|arm64.*)$")
+    IF(NOT IOS_ARCH MATCHES "^(i386|x86_64|amd64|armv7.*|arm64.*)$")
       MESSAGE(FATAL_ERROR "Unrecognized IOS_ARCH = ${IOS_ARCH}")
     ENDIF()
   ELSE()
     MESSAGE(FATAL_ERROR "CMAKE_SYSTEM_PROCESSOR is not defined")
   ENDIF()
-ELSEIF(NOT XNNPACK_TARGET_PROCESSOR MATCHES "^(i[3-6]86|x86|x86_64|AMD64|armv[5-8].*|aarch64|arm64.*|riscv(32|64|128))$")
+ELSEIF(NOT XNNPACK_TARGET_PROCESSOR MATCHES "^(i[3-6]86|x86|x86_64|amd64|armv[5-8].*|aarch64|arm64.*|riscv(32|64|128))$")
   MESSAGE(FATAL_ERROR "Unrecognized XNNPACK_TARGET_PROCESSOR = ${XNNPACK_TARGET_PROCESSOR}")
 ENDIF()
 
@@ -6373,7 +6373,7 @@ IF(XNNPACK_TARGET_PROCESSOR MATCHES "^(a
   ENDIF()
   LIST(APPEND JIT_SRCS ${JIT_AARCH64_SRCS})
 ENDIF()
-IF(XNNPACK_TARGET_PROCESSOR MATCHES "^(i[3-6]86|x86_64|AMD64)$" OR IOS_ARCH MATCHES "^(i386|x86_64|AMD64)$")
+IF(XNNPACK_TARGET_PROCESSOR MATCHES "^(i[3-6]86|x86_64|amd64)$" OR IOS_ARCH MATCHES "^(i386|x86_64|amd64)$")
   LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_SSE_MICROKERNEL_SRCS})
   LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_SSE2_MICROKERNEL_SRCS})
   LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_SSSE3_MICROKERNEL_SRCS})
@@ -6461,7 +6461,7 @@ IF(XNNPACK_TARGET_PROCESSOR MATCHES "^(a
     SET_PROPERTY(SOURCE ${AARCH64_ASM_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -arch arm64 ")
   ENDIF()
 ENDIF()
-IF(XNNPACK_TARGET_PROCESSOR MATCHES "^(i[3-6]86|x86|x86_64|AMD64)$" OR IOS_ARCH MATCHES "^(i386|x86_64|AMD64)$")
+IF(XNNPACK_TARGET_PROCESSOR MATCHES "^(i[3-6]86|x86|x86_64|amd64)$" OR IOS_ARCH MATCHES "^(i386|x86_64|amd64)$")
   IF(MSVC)
     IF(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86" OR CMAKE_SIZEOF_VOID_P EQUAL 4)
       SET_PROPERTY(SOURCE ${ALL_SSE_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /arch:SSE ")
